# Check for new App Store releases and announce on GitHub

# We ask a mirror of the APK on the app store and check for integrity of the APK
name: checking for new appstore releases

# Controls when the action will run. Triggers when manually activated.
on: 
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-java@v1
        with:
          java-version: 13

      - name: Installing rclone
        run: |
           curl https://rclone.org/install.sh | sudo bash

      - name: Creating rclone config to upload the cache
        run: |
          mkdir -p $HOME/.config/rclone/
          echo '[sync]' >> $HOME/.config/rclone/rclone.conf
          echo 'type = sftp' >> $HOME/.config/rclone/rclone.conf
          echo 'host = ${{ secrets.STORAGE_HOST }}' >> $HOME/.config/rclone/rclone.conf
          echo 'user = storage' >> $HOME/.config/rclone/rclone.conf
          echo 'key_pem = ${{ secrets.STORAGE_KEY }}' >> $HOME/.config/rclone/rclone.conf

      - name: Downloading apksigner.jar from storage
        run: |
          rclone copy --fast-list --transfers=16 sync:kiwibrowser-tools/ ./tools
          cp -v tools/apksigner.jar .

      - name: Downloading check_for_playstore_releases.sh script
        run: wget https://raw.githubusercontent.com/kiwibrowser/src/master/.github/workflows/check_for_playstore_releases.sh

      - name: Downloading artifacts from storage
        run: |
          rclone copy --fast-list --transfers=16 sync:kiwibrowser-reference/ ./reference

      - name: Listing local artifacts
        run: |
          ls -laR *

      - name: Executing check_for_playstore_releases.sh script
        env:
          APPSTORE_HOST: ${{ secrets.APPSTORE_HOST }}
          APPSTORE_LIST_PATH: ${{ secrets.APPSTORE_LIST_PATH }}
          APPSTORE_DOWNLOAD_PATH: ${{ secrets.APPSTORE_DOWNLOAD_PATH }}
          AUTHORIZATION: ${{ secrets.APPSTORE_AUTHORIZATION }}
          PROXY_HOST: ${{ secrets.APPSTORE_PROXY_HOST }}
          PROXY_USER: ${{ secrets.APPSTORE_PROXY_USER }}
        run: bash check_for_playstore_releases.sh

      - name: Checking if the releases have changed (if they are the same we stop early)
        run: |
          diff ./Kiwi-arm-playstore.apk ./reference/Kiwi-arm-playstore.apk && exit -1 || echo This is a new release
          diff ./Kiwi-arm64-playstore.apk ./reference/Kiwi-arm64-playstore.apk && exit -1 || echo This is a new release
          diff ./Kiwi-x86-playstore.apk ./reference/Kiwi-x86-playstore.apk && exit -1 || echo This is a new release
          diff ./Kiwi-x64-playstore.apk ./reference/Kiwi-x64-playstore.apk && exit -1 || echo This is a new release

      - name: Creating release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_id }}
          release_name: Play Store ${{ github.run_id }}
          draft: false
          prerelease: false
          body: |
            This release is the same as one recent development version, except it is signed by Google instead of the developer.
            
            There will be a new release of Kiwi Browser in a couple of days called Kiwi Browser Next, this browser will be based on Chromium 93.
            
            If you are interested into participating into the beta, you can join https://github.com/kiwibrowser/src.next/releases

      - name: Uploading release asset (arm-playstore)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Kiwi-arm-playstore.apk
          asset_name: Kiwi-${{ github.run_id }}-arm-playstore.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Uploading release asset (arm64-playstore)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Kiwi-arm64-playstore.apk
          asset_name: Kiwi-${{ github.run_id }}-arm64-playstore.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Uploading release asset (x86-playstore)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Kiwi-x86-playstore.apk
          asset_name: Kiwi-${{ github.run_id }}-x86-playstore.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Uploading release asset (x64-playstore)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Kiwi-x64-playstore.apk
          asset_name: Kiwi-${{ github.run_id }}-x64-playstore.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Uploading artifacts to storage
        run: |
          rclone copy --fast-list --transfers=16 ./Kiwi-arm-playstore.apk sync:kiwibrowser-reference/
          rclone copy --fast-list --transfers=16 ./Kiwi-arm64-playstore.apk sync:kiwibrowser-reference/
          rclone copy --fast-list --transfers=16 ./Kiwi-x86-playstore.apk sync:kiwibrowser-reference/
          rclone copy --fast-list --transfers=16 ./Kiwi-x64-playstore.apk sync:kiwibrowser-reference/

#      - name: Send announcement on Discord
#        if: ${{ github.repository_owner == 'kiwibrowser' }}
#        run: |
#          curl -H 'Content-Type: application/json' -X POST -d '{"username": "Kiwi Builder", "content": "A new version of Kiwi Browser appeared on the Play Store: https://github.com/kiwibrowser/src/releases/tag/${{ github.run_id }}"}' ${{ secrets.DISCORD_WEBHOOK }}
