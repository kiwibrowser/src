// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
#include 'src/builtins/builtins-typed-array-gen.h'

namespace typed_array {
  extern runtime TypedArraySortFast(Context, Object): JSTypedArray;

  type MethodName constexpr 'MethodName';
  const kTypedArrayProtoSort: constexpr MethodName generates  '\"%TypedArray%.prototype.sort\"';
  extern macro TypedArrayBuiltinsAssembler::ValidateTypedArray(Context, Object, constexpr MethodName): JSTypedArray;

  extern builtin TypedArrayLoadElementAsTagged(
      Context, JSTypedArray, Smi, Smi): Object;
  extern builtin TypedArrayStoreElementFromTagged(
      Context, JSTypedArray, Smi, Smi, Object);

  extern macro TypedArrayBuiltinsAssembler::NumberIsNaN(Number): bool;

  macro CallCompareWithDetachedCheck(
      context: Context, array: JSTypedArray, comparefn: Callable, a: Object,
      b: Object): Number labels Detached {
    // a. Let v be ? ToNumber(? Call(comparefn, undefined, x, y)).
    let v: Number =
        ToNumber_Inline(context, Call(context, comparefn, Undefined, a, b));

    // b. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.
    if (IsDetachedBuffer(array.buffer)) goto Detached;

    // c. If v is NaN, return +0.
    if (NumberIsNaN(v)) return 0;

    // d. return v.
    return v;
  }

  // Wrapped CSA macro for better readability. Ideally we want to map this
  // as the array operator "[]".
  // TODO(szuend): Change Load/Store macros so they use function pointers to
  //               the correct builtins as soon as they are available in Torque.
  //
  //               Currently the dispatch to the correct load/store instruction
  //               is done during runtime in a builtin. This costs around 20%
  //               performance in relevant benchmarks, but greatly reduces the
  //               code size - compared to sort macro "copies" for each
  //               ElementsKind that inline the correct load/store.
  macro Load(
      context: Context, array: JSTypedArray, kind: Smi, index: Smi): Object {
    return TypedArrayLoadElementAsTagged(context, array, kind, index);
  }

  // Wrapped array store CSA macro for better readability.
  macro Store(
      context: Context, array: JSTypedArray, kind: Smi, index: Smi,
      value: Object) {
    TypedArrayStoreElementFromTagged(context, array, kind, index, value);
  }

  // InsertionSort is used for smaller arrays.
  macro TypedArrayInsertionSort(
      context: Context, array: JSTypedArray, kind: Smi, fromArg: Smi,
      toArg: Smi, comparefn: Callable)
  labels Detached {
    let from: Smi = fromArg;
    let to: Smi = toArg;

    if (IsDetachedBuffer(array.buffer)) goto Detached;

    for (let i: Smi = from + 1; i < to; ++i) {
      let element: Object = Load(context, array, kind, i);
      let j: Smi = i - 1;
      for (; j >= from; --j) {
        let tmp: Object = Load(context, array, kind, j);
        let order: Number = CallCompareWithDetachedCheck(
            context, array, comparefn, tmp, element) otherwise Detached;
        if (order > 0) {
          Store(context, array, kind, j + 1, tmp);
        } else {
          break;
        }
      }
      Store(context, array, kind, j + 1, element);
    }
  }

  macro TypedArrayQuickSortImpl(
      context: Context, array: JSTypedArray, kind: Smi, fromArg: Smi,
      toArg: Smi, comparefn: Callable)
  labels Detached {
    let from: Smi = fromArg;
    let to: Smi = toArg;

    while (to - from > 1) {
      if (to - from <= 10) {
        // TODO(szuend): Investigate InsertionSort removal.
        //               Currently it does not make any difference when the
        //               benchmarks are run locally.
        TypedArrayInsertionSort(context, array, kind, from, to, comparefn)
        otherwise Detached;
        break;
      }

      // TODO(szuend): Check if a more involved third_index calculation is
      //               worth it for very large arrays.
      let thirdIndex: Smi = from + ((to - from) >>> 1);

      if (IsDetachedBuffer(array.buffer)) goto Detached;

      // Find a pivot as the median of first, last and middle element.
      let v0: Object = Load(context, array, kind, from);
      let v1: Object = Load(context, array, kind, to - 1);
      let v2: Object = Load(context, array, kind, thirdIndex);

      let c01: Number = CallCompareWithDetachedCheck(
          context, array, comparefn, v0, v1) otherwise Detached;
      if (c01 > 0) {
        // v1 < v0, so swap them.
        let tmp: Object = v0;
        v0 = v1;
        v1 = tmp;
      }
      // v0 <= v1.
      let c02: Number = CallCompareWithDetachedCheck(
          context, array, comparefn, v0, v2) otherwise Detached;
      if (c02 >= 0) {
        // v2 <= v0 <= v1.
        let tmp: Object = v0;
        v0 = v2;
        v2 = v1;
        v1 = tmp;
      } else {
        // v0 <= v1 && v0 < v2.
        let c12: Number = CallCompareWithDetachedCheck(
            context, array, comparefn, v1, v2) otherwise Detached;
        if (c12 > 0) {
          // v0 <= v2 < v1.
          let tmp: Object = v1;
          v1 = v2;
          v2 = tmp;
        }
      }

      // v0 <= v1 <= v2.
      Store(context, array, kind, from, v0);
      Store(context, array, kind, to - 1, v2);

      let pivot: Object = v1;
      let lowEnd: Smi = from + 1;   // Upper bound of elems lower than pivot.
      let highStart: Smi = to - 1;  // Lower bound of elems greater than pivot.

      let lowEndValue: Object = Load(context, array, kind, lowEnd);
      Store(context, array, kind, thirdIndex, lowEndValue);
      Store(context, array, kind, lowEnd, pivot);

      // From low_end to idx are elements equal to pivot.
      // From idx to high_start are elements that haven"t been compared yet.
      for (let idx: Smi = lowEnd + 1; idx < highStart; idx++) {
        let element: Object = Load(context, array, kind, idx);
        let order: Number = CallCompareWithDetachedCheck(
            context, array, comparefn, element, pivot) otherwise Detached;

        if (order < 0) {
          lowEndValue = Load(context, array, kind, lowEnd);
          Store(context, array, kind, idx, lowEndValue);
          Store(context, array, kind, lowEnd, element);
          lowEnd++;
        } else if (order > 0) {
          let breakFor: bool = false;

          while (order > 0) {
            highStart--;
            if (highStart == idx) {
              breakFor = true;
              break;
            }

            let topElem: Object = Load(context, array, kind, highStart);
            order = CallCompareWithDetachedCheck(
                context, array, comparefn, topElem, pivot) otherwise Detached;
          }

          if (breakFor) {
            break;
          }

          let highStartValue: Object = Load(context, array, kind, highStart);
          Store(context, array, kind, idx, highStartValue);
          Store(context, array, kind, highStart, element);

          if (order < 0) {
            element = Load(context, array, kind, idx);

            lowEndValue = Load(context, array, kind, lowEnd);
            Store(context, array, kind, idx, lowEndValue);
            Store(context, array, kind, lowEnd, element);
            lowEnd++;
          }
        }
      }

      if ((to - highStart) < (lowEnd - from)) {
        TypedArrayQuickSort(context, array, kind, highStart, to, comparefn);
        to = lowEnd;
      } else {
        TypedArrayQuickSort(context, array, kind, from, lowEnd, comparefn);
        from = highStart;
      }
    }
  }

  builtin TypedArrayQuickSort(
      context: Context, array: JSTypedArray, kind: Smi, from: Smi, to: Smi,
      comparefn: Callable): JSTypedArray {
    try {
      TypedArrayQuickSortImpl(context, array, kind, from, to, comparefn)
      otherwise Detached;
    }
    label Detached {
      ThrowTypeError(
          context, kDetachedOperation, '%TypedArray%.prototype.sort');
    }
    return array;
  }

  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
  javascript builtin TypedArrayPrototypeSort(
      context: Context, receiver: Object, ...arguments): JSTypedArray {
    // 1. If comparefn is not undefined and IsCallable(comparefn) is false,
    //    throw a TypeError exception.
    let comparefnObj: Object = arguments.length > 0 ? arguments[0] : Undefined;
    if (comparefnObj != Undefined && !TaggedIsCallable(comparefnObj)) {
      ThrowTypeError(context, kBadSortComparisonFunction, comparefnObj);
    }

    // 2. Let obj be the this value.
    let obj: Object = receiver;

    // 3. Let buffer be ? ValidateTypedArray(obj).
    //    ValidateTypedArray currently returns the array, not the ViewBuffer.
    let array: JSTypedArray =
        ValidateTypedArray(context, obj, kTypedArrayProtoSort);

    // Default sorting is done in C++ using std::sort
    if (comparefnObj == Undefined) {
      return TypedArraySortFast(context, obj);
    }

    // 4. Let len be obj.[[ArrayLength]].
    let len: Smi = array.length;

    try {
      let comparefn: Callable =
          Cast<Callable>(comparefnObj) otherwise CastError;
      let elementsKind: Smi = Convert<Smi, ElementsKind>(array.elements_kind);
      TypedArrayQuickSort(context, array, elementsKind, 0, len, comparefn);
    }
    label CastError {
      unreachable;
    }
    return array;
  }
}
